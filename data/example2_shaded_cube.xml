<?xml version="1.0"?>
<!--
  Copyright STIFTELSEN SINTEF 2014

  This file is part of Scene.

  Scene is free software: you can redistribute it and/or modifyit under the
  terms of the GNU Affero General Public License as published by the Free
  Software Foundation, either version 3 of the License, or (at your option) any
  later version.

  Scene is distributed in the hope that it will be useful, but WITHOUT ANY
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
  A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
  details.
 
  You should have received a copy of the GNU Affero General Public License
  along with the Scene.  If not, see <http://www.gnu.org/licenses/>.
-->
<COLLADA>
  <asset>
    <created>2011-04-12T13:23:22Z</created>
    <modified>2011-04-12T13:23:22Z</modified>
  </asset>

  <library_geometries>

    <geometry id="shaded_cube">
      <mesh>
        <!-- Vertex sources must match up for all vertices, i.e., vertex i has
             position i and texcoord i. Collada can handle multiple index sets,
             but scene has no support for it as OpenGL doesn't support it. -->

        <source id="positions">
          <float_array id="positions_array" count="108">
            -1.0  1.0 -1.0    1.0  1.0 -1.0    1.0 -1.0 -1.0
            1.0 -1.0 -1.0   -1.0 -1.0 -1.0   -1.0  1.0 -1.0
            -1.0  1.0  1.0    1.0 -1.0  1.0    1.0  1.0  1.0
            1.0 -1.0  1.0   -1.0  1.0  1.0   -1.0 -1.0  1.0
            1.0  1.0 -1.0    1.0  1.0  1.0    1.0 -1.0  1.0
            1.0 -1.0  1.0    1.0 -1.0 -1.0    1.0  1.0 -1.0
            -1.0  1.0 -1.0   -1.0 -1.0  1.0   -1.0  1.0  1.0
            -1.0 -1.0  1.0   -1.0  1.0 -1.0   -1.0 -1.0 -1.0
            -1.0  1.0 -1.0   -1.0  1.0  1.0    1.0  1.0  1.0
            1.0  1.0  1.0    1.0  1.0 -1.0   -1.0  1.0 -1.0
            -1.0 -1.0 -1.0    1.0 -1.0  1.0   -1.0 -1.0  1.0
            1.0 -1.0  1.0   -1.0 -1.0 -1.0    1.0 -1.0 -1.0
          </float_array>
          <technique_common>
            <accessor source="#positions_array" count="36">
              <param name="X" type="float"/>
              <param name="Y" type="float"/>
              <param name="Z" type="float"/>
            </accessor>
          </technique_common>
        </source>

        <source id="normals">
          <float_array id="normals_array" count="108">
            0.0  0.0 -1.0    0.0  0.0 -1.0    0.0  0.0 -1.0
            0.0  0.0 -1.0    0.0  0.0 -1.0    0.0  0.0 -1.0
            0.0  0.0  1.0    0.0  0.0  1.0    0.0  0.0  1.0
            0.0  0.0  1.0    0.0  0.0  1.0    0.0  0.0  1.0
            1.0  0.0  0.0    1.0  0.0  0.0    1.0  0.0  0.0
            1.0  0.0  0.0    1.0  0.0  0.0    1.0  0.0  0.0
            -1.0  0.0  0.0   -1.0  0.0  0.0   -1.0  0.0  0.0
            -1.0  0.0  0.0   -1.0  0.0  0.0   -1.0  0.0  0.0
            0.0  1.0  0.0    0.0  1.0  0.0    0.0  1.0  0.0
            0.0  1.0  0.0    0.0  1.0  0.0    0.0  1.0  0.0
            0.0 -1.0  0.0    0.0 -1.0  0.0    0.0 -1.0  0.0
            0.0 -1.0  0.0    0.0 -1.0  0.0    0.0 -1.0  0.0
          </float_array>
          <technique_common>
            <accessor source="normals_array" count="36">
              <param name="X" type="float"/>
              <param name="Y" type="float"/>
              <param name="Z" type="float"/>
            </accessor>
          </technique_common>
        </source>


        <vertices id="geometry_vertices">
          <input semantic="NORMAL" source="#normals"/>
          <input semantic="POSITION" source="#positions"/>
        </vertices>
        <triangles count="12" material="default" />
      </mesh>
    </geometry>

  </library_geometries>

  <library_effects>

    <effect id="effect_shaded">
      <newparam sid="mvp"><semantic>MODELVIEW_PROJECTION_MATRIX</semantic><float4x4>0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3</float4x4></newparam>
      <newparam sid="nm"><semantic>NORMAL_MATRIX</semantic><float3x3>1 0 0 0 1 0 0 0 1</float3x3></newparam>
      <!-- Here we do a little hack. Since the app creates the camera node, we
           can't directly include the light source inside that node in this
           document. However, if we ask to get the light in world coordinates,
           the camera's orientation is cancelled out, and we end up with a
           headlight -->
      <newparam sid="light_z"><semantic>LIGHT0_Z_WORLD</semantic><float3>0 0 0</float3></newparam>
      <newparam sid="color"><float3>1 1 1</float3></newparam>
      <profile_GLSL>
        <technique sid="default">
          <pass>
            <states>
              <depth_test_enable value="TRUE" />
            </states>
            <program>
              <!-- The vertex shader -->
              <shader stage="VERTEX">
                <sources>
                  <inline>
uniform mat4 MVP;
uniform mat3 NM;
attribute vec3 position;
attribute vec3 normal;
varying vec3 es_normal;
void
main()
{
    es_normal = NM * normal;
    gl_Position = MVP * vec4( position, 1.0 );
}
                  </inline>
                </sources>
              </shader>
              <!-- The fragment shader -->
              <shader stage="FRAGMENT">
                <sources>
                  <inline>
varying vec3 es_normal;
uniform vec3 light_z;
uniform vec3 color;
void
main()
{
    gl_FragColor = vec4( color*max(0.1, dot( es_normal, light_z ) ), 1.0 );
}
                  </inline>
                </sources>
              </shader>
              <bind_attribute symbol="position"><semantic>POSITION</semantic></bind_attribute>
              <bind_attribute symbol="normal"><semantic>NORMAL</semantic></bind_attribute>
              <bind_uniform symbol="MVP"><param ref="mvp" /></bind_uniform>
              <bind_uniform symbol="NM"><param ref="nm" /></bind_uniform>
              <bind_uniform symbol="light_z"><param ref="light_z"/></bind_uniform>
              <bind_uniform symbol="color"><param ref="color" /></bind_uniform>
            </program>
          </pass>
        </technique>
      </profile_GLSL>
    </effect>

  </library_effects>

  <library_materials>
    <material id="material_shaded">
      <instance_effect url="#effect_shaded" />
    </material>
  </library_materials>

  <library_lights>

    <!-- Here we define a point light. The position of the light is given when
         when we instantiate the light into the scene graph -->
    <light id="my_light">
      <technique_common>
        <point>
          <!-- color is mandatory -->
          <color>0.8 1 1</color>
        </point>
      </technique_common>
    </light>

  </library_lights>

  <library_visual_scenes>
    <visual_scene id="onscreen_example1">
      <node id="root_node">
        <instance_node url="#app_camera_node" />

        <!-- And we instantiate the light source in the scene -->
        <node id="light_node">
          <instance_light url="#my_light" />
        </node>

        <node>
          <instance_geometry url="#shaded_cube">
            <bind_material>
              <technique_common>
                <instance_material symbol="default" target="material_shaded" />
              </technique_common>
            </bind_material>
          </instance_geometry>
        </node>
      </node>
      <evaluate_scene>
        <render camera_node="#app_camera_node">
	  <!-- This is an extension. We specify which light source (or actually
	       the node that contains the light source) that shall play the role
	       as light index x. Scene currently supports four active light sources -->
	  <extra>
	    <technique profile="scene">
	      <light_node index="0" ref="#light_node" />
	    </technique>
	  </extra>
	</render>
      </evaluate_scene>
    </visual_scene>

  </library_visual_scenes>

</COLLADA>
